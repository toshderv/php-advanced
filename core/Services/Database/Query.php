<?php


namespace Core\Services\Database;

class Query extends QueryBuilder
{
    public function __construct(
        protected string $dbName,
        protected array|string $select = '*',
        protected ?array $where = null
    ) {}

    public function toSql(): string
    {
        $sql = '';
        $sql .= $this->sqlSelect();
        $sql .= $this->sqlWhere();

        return $sql;
    }

    public function dbName(string $dbName): Query
    {
        return parent::setDbName($dbName); // TODO: Change the autogenerated stub
    }

    public function select(array|string $select): Query
    {
        return parent::setSelect($select); // TODO: Change the autogenerated stub
    }

    public function where(?array $where): Query
    {
        return parent::setWhere($where); // TODO: Change the autogenerated stub
    }

    /**
     * @return string
     */
    public function sqlSelect(): string
    {
        $sqlSelect = 'SELECT ';

        if (is_array($this->select)) {
            $sqlSelect .= implode(', ', $this->select);
        } else {
            $sqlSelect .= $this->select;
        }

        $sqlSelect .= ' FROM ' . $this->dbName;

        return $sqlSelect;
    }

    /**
     * @return string
     */
    public function sqlWhere(): string
    {
        if (is_null($this->where)) {
            return '';
        }

        $sqlWhere = ' WHERE';
        $fieldName = '';
        $comparisonSign = ' = ';
        $condition = '';

        if (count($this->where) === 2 && !is_array($this->where[0])) {
            $fieldName = $this->where[0];
            $condition = $this->where[1];
        } elseif (count($this->where) === 3 && !is_array($this->where[0])) {
            $fieldName = $this->where[0];
            $comparisonSign = $this->where[1];
            $condition = $this->where[2];
        }

        $sqlWhere .= " $fieldName $comparisonSign $condition";

        return $sqlWhere;
    }
}